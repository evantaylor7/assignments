// from Project Euler:

// 1.
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

const sumMultiples = num => {
	let sum = 0
	for(let i = 0; i < num; i++){
		if(i % 3 === 0 || i % 5 === 0){
			sum += i
		}
	}
	return sum
}

// console.log(sumMultiples(10)) // 23
// console.log(sumMultiples(1000))


// 2.
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

const sumEvenFib = limit => {
    let sequence = [1, 2]
    let lastNum = sequence[sequence.length - 1]
    let secondToLast = sequence[sequence.length - 2]
    while(lastNum + secondToLast < limit){
        lastNum = sequence[sequence.length - 1]
        secondToLast = sequence[sequence.length - 2]
        sequence.push(lastNum + secondToLast)
    }
	let evens = sequence.filter(num => num % 2 === 0)
	return evens.reduce((a, b) => a + b)
}

// console.log(sumEvenFib(4000000))


// 3.
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

const largestPrime = num => {
    var factors = []
    divisor = 2

    while(num > 2){
        if(num % divisor === 0){
            factors.push(divisor)
            num = num / divisor
        } else {
            divisor ++
        }
    }

    return factors.sort((a, b) => b - a)[0]
}

// console.log(largestPrime(13195))
// console.log(largestPrime(600851475143))


// 4.
// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
// Find the largest palindrome made from the product of two 3-digit numbers.

const largestPalindrome = () => {
    let largest = 0
    for(let i = 100; i < 1000; i++){
        for(let j = 100; j < 1000; j++){
            let number = j * i
            let splitNum = number.toString().split('')
            let l = splitNum.length
            let firstHalf = splitNum.slice(0, Math.floor((l / 2)))
            let secondHalf = splitNum.slice(Math.ceil(l / 2))
            if(secondHalf.reverse().join('') == firstHalf.join('')){
                if(number > largest){
                    largest = number
                }
            }
        }
    }
    return largest
}

// console.log(largestPalindrome())